#!/usr/bin/env python
#
#  An wrapper for rsync when called from an SSH authorized_keys file to
#  pick up client settings for compression and bwlimit so that they can be
#  controlled from the server, while hard-coding the other options.

#   Copyright (C) 2013  Sean Reifschneider, RealGo, Inc.
#   <sean+opensource@realgo.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import os
import sys
import shlex
import syslog
syslog.openlog(os.path.basename(sys.argv[0]))


def get_program_path():
    '''Get the full path to the Python program that is running.
    This is used for re-invoking the program under sudo, so it needs to track
    down the path to the program that was run, by following any relative
    pathing or searching the path.
    '''
    return os.path.abspath(sys.argv[0])


def length_read(fp, max_length=10000):
    '''Read a string from `fp`, the string must start with a length and ":".
    Data is read from `fp`, with the first 10 characters (or less) expected
    to be an ASCII decimal string representing the length of the remainder
    of the string and a colon.  For example: "5:hello", or "000000002:hi".
    '''
    data = ''
    while len(data) < 10 and ':' not in data:
        tmp = fp.read(1)
        if not tmp:
            raise ValueError('Invalid input to length_read')
        data += tmp

    length, data = data.split(':', 1)
    length = int(length)

    if length > max_length:
        raise ValueError(
            'Requested read length {0} greater than max {1}'
            .format(length, max_length))

    while len(data) < length:
        tmp = fp.read(length - len(data))
        if not tmp:
            raise ValueError('Incomplete read in length_read')
        data += tmp

    return data


def debug(msg):
    syslog.syslog(msg)
    print msg


def run_as_root():
    '''If this process is not being run as root, re-exec it under sudo.
    If already running as root, just return.
    '''
    if os.getuid() != 0:
        os.execvp(
            'sudo', ['sudo', '-n', get_program_path()]
            + ['--'] + parse_ssh_command() + get_rsync_arguments())
        debug('Failed to exec sudo, probably need to fix sudoers')
        sys.exit(1)


def parse_option_bwlimit(s):
    '''Parse an "bwlimit=DDDD" option.
    Return the integer bandwidth limit.
    '''
    bwlimit = int(s.split('=', 1)[-1])
    max_limit = 10000000
    if bwlimit > max_limit:
        raise ValueError('Bandwidth limit too high, max={0}'.format(max_limit))
    return bwlimit


def is_whitelisted_fs(fs):
    '''Is the specified file-system type worth backing up?
    This is the fstype as read from /proc/mounts in the third column.
    '''
    return fs in ['btrfs', 'zfs', 'ext2', 'ext3', 'ext4', 'xfs', 'jfs']


def run_rsync_backup():
    '''Run the rsync command for doing backups, with the specified options.
    '''
    rsync_arguments = parse_ssh_command() + get_rsync_arguments()

    os.execvp('rsync', rsync_arguments)
    debug('Error executing rsync command.')
    sys.exit(250)


def get_rsync_arguments(arguments=None):
    '''Find a "--" in the arguments and return the remainder of the arguments
    as a list.
    '''
    if arguments is None:
        arguments = sys.argv[1:]
    if not '--' in arguments:
        raise ValueError('No "--" found in arguments.')
    return arguments[arguments.index('--') + 1:]


def parse_ssh_command(arguments=None):
    '''Parse the rsync options sent from the remote end and find out if
    compression or bwlimit is specified.  Return a list of the arguments
    that should be added to the command-line.
    '''
    if arguments is None:
        arguments = os.environ.get('SSH_ORIGINAL_COMMAND', '')

    found_args = []
    for option in shlex.split(arguments)[1:]:
        if option.startswith('--bwlimit='):
            rate = int(option[10:])
            found_args.append('--bwlimit=%d' % rate)
        elif option == '--compress':
            found_args.append('--compress')
        elif option.startswith('-') and not option.startswith('--'):
            if 'z' in option[1:]:
                found_args.append('--compress')

    return found_args


def main():
    run_as_root()
    run_rsync_backup()

if __name__ == '__main__':
    main()
